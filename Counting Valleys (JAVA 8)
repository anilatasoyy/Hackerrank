import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the countingValleys function below.
    static int countingValleys(int n, String s) {
        char ar[] = s.toCharArray();
       int alt = 0;
       int result = 0;
        for(int i = 0;i<n;i++){
            if(ar[i] == 'D'){
            alt -= 1;
            }
            // YOU HAVE TO PUT IF(0) BECAUSE IF YOU ARE GOING DOWN TO REACH ZERO THAT MEANS YOU PASSED A MOUNTAIN NOT A VALLEY (ELSE IS FOR 'U' CHAR)
            else{
            
            alt +=1;
            if(alt == 0){
                result++;
            }
            }
           
        
        }
        
return result;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String s = scanner.nextLine();

        int result = countingValleys(n, s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
